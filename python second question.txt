{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 def find_local_maxima(data):\
    """\
    Find all the local maxima in the given list.\
    Local maxima are numbers that are greater than their neighbors.\
\
    Parameters:\
    - data: list of integers\
\
    Returns:\
    - A list of tuples containing the local maxima and their positions\
    """\
    local_maxima = []\
\
    # Handle edge cases\
    if len(data) < 3:\
        return local_maxima\
\
    # Loop through the list to find local maxima\
    for i in range(1, len(data) - 1):\
        if data[i] > data[i - 1] and data[i] > data[i + 1]:\
            local_maxima.append((data[i], i))\
\
    return local_maxima\
\
# Example usage\
data = [3, 6, 1, 2, 5, 4, 10, 5, 7, 2, 4]\
local_maxima_result = find_local_maxima(data)\
\
# Output the results\
for val, pos in local_maxima_result:\
    print(f"\{val\} at position \{pos\}")  # Output: 6 at position 1, 5 at position 4, 10 at position 6, 7 at position 8\
}